#include "uint128.h"
#include <stdio.h>


uint128::uint128()
{
	int i;
	for (i = 0; i<16; i++)
		data[i] = 0;
	data[16] = '\0';
}

uint128::uint128(uint64_t b)
{
	int i;
	for (i = 15; i >= 0; i--)
		data[i] = 0;
	data[8] = ((unsigned char *) &b)[7];
	data[9] = ((unsigned char *) &b)[6];
	data[10] = ((unsigned char *) &b)[5];
	data[11] = ((unsigned char *) &b)[4];
	data[12] = ((unsigned char *) &b)[3];
	data[13] = ((unsigned char *) &b)[2];
	data[14] = ((unsigned char *) &b)[1];
	data[15] = ((unsigned char *) &b)[0];

}



uint128 uint128::operator<<(const int& b)
{
	char mask = 0x80;
	uint128 i128 = *this;
	char extra = 0, tmp = 0;
	int i, j;
	for (j = 0; j<b; j++)
	{
		extra = 0;
		for (i = 15; i >= 0; i--)
		{
			tmp = i128.data[i];
			i128.data[i] = i128.data[i] << 1;
			i128.data[i] = i128.data[i] | extra;
			if ((mask&tmp) != 0)
				extra = 1;
			else
				extra = 0;
		}
	}
	return i128;
}

void uint128::print()
{
	int i;
	for (i = 0; i<16; i++)
		printf("%02X ", data[i]);
	printf("\n");
}

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////



uint128 uint128::operator=(uint128 b)
{
	int i;
	for (i = 15; i >= 0; i--)
		data[i] = b.data[i];
	return *this;
}

uint128 uint128::operator=(uint64_t b)
{
	int i;
	for (i = 15; i >= 0; i--)
		data[i] = 0;
	data[8] = ((unsigned char *) &b)[7];
	data[9] = ((unsigned char *) &b)[6];
	data[10] = ((unsigned char *) &b)[5];
	data[11] = ((unsigned char *) &b)[4];
	data[12] = ((unsigned char *) &b)[3];
	data[13] = ((unsigned char *) &b)[2];
	data[14] = ((unsigned char *) &b)[1];
	data[15] = ((unsigned char *) &b)[0];
	return *this;
}


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator+(const uint128& b)
{
	int i, tmp;
	uint128 ui = *this;
	unsigned char value, extra = 0;
	for (i = 15; i >= 0; i--)
	{
		value = b.data[i];
		tmp = (int) ui.data[i] + (int) value + (int) extra;
		ui.data[i] = ui.data[i] + value + extra;
		extra = tmp > 0xFF ? 1 : 0;
	}
	return ui;
}

uint128 uint128::operator+(const uint64_t b)
{
	int i, tmp;
	uint128 ui = *this;
	unsigned char value, extra = 0;
	unsigned char * a = (unsigned char*) &b;
	for (i = 15; i >= 0; i--)
	{
		value = i > 7 ? a[15 - i] : 0;
		tmp = (int) ui.data[i] + (int) value + (int) extra;
		ui.data[i] = ui.data[i] + value + extra;
		if (tmp>0xff)
			extra = tmp / 0xFF;
		else
			extra = 0;
	}
	return ui;
}

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator-(const uint128& b)
{
	int i, tmp;
	uint128 a = *this;
	unsigned char value, extra = 0;
	for (i = 15; i >= 0; i--)
	{
		value = b.data[i];
		tmp = a.data[i];
		if (tmp - ((int) value + (int) extra)<0x00)
		{
			tmp += 256;
			a.data[i] = (unsigned char) (tmp - ((int) value + (int) extra));
			extra = 1;
		}
		else
		{
			a.data[i] = a.data[i] - value;
			a.data[i] = a.data[i] - extra;
			extra = 0;
		}
	}
	return a;
}

uint128 uint128::operator-(const uint64_t b)
{
	int i, tmp;
	uint128 ui = *this;
	unsigned char value, extra = 0;
	unsigned char * a = (unsigned char*) &b;
	if (ui > b)
	{
		for (i = 15; i >= 0; i--)
		{
			value = i > 7 ? a[15 - i] : 0;
			tmp = ui.data[i];
			if (tmp - ((int) value + (int) extra) < 0x00)
			{
				tmp += 256;
				ui.data[i] = (unsigned char) (tmp - ((int) value + (int) extra));
				extra = 1;
			}
			else
			{
				ui.data[i] = ui.data[i] - value;
				ui.data[i] = ui.data[i] - extra;
				extra = 0;
			}
		}
		return ui;
	}
	return 0;
}


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator*(const uint128& b)
{
	uint128 a, c;
	int i, j, q;
	for (q = 15; q >= 0; q--)
	{
		j = 0;
		for (i = 1; i <= b.data[q]; i = 2 * i)
		{
			c = *this;
			if ((i&b.data[q]) != 0)
				a = a + (c << (j + 8 * (15 - q)));
			j++;
		}
	}
	return a;
}

uint128 uint128::operator*(const uint64_t b)
{
	return ((*this)*(uint128) b);
}

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator+=(const uint128& b)
{
	int i, tmp;
	unsigned char value, extra = 0;
	unsigned char * a = (unsigned char*) &b;
	for (i = 15; i >= 0; i--)
	{
		if (i>11)
			value = a[15 - i];
		tmp = (int) data[i] + (int) value + (int) extra;
		data[i] = data[i] + value + extra;
		if (tmp>0xff)
			extra = tmp / 0xFF;
		else
			extra = 0;
	}
	return *this;
}

uint128 uint128::operator+=(const uint64_t b)
{
	int i, tmp;
	unsigned char value, extra = 0;
	unsigned char * a = (unsigned char*) &b;
	for (i = 15; i >= 0; i--)
	{
		value = i > 7 ? a[15 - i] : 0;
		tmp = (int) data[i] + (int) value + (int) extra;
		data[i] = data[i] + value + extra;
		if (tmp>0xff)
			extra = tmp / 0xFF;
		else
			extra = 0;
	}
	return *this;
}

/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator-=(const uint128& b)
{
	int i, tmp;
	unsigned char value, extra = 0;
	for (i = 15; i >= 0; i--)
	{
		value = b.data[i];
		tmp = data[i];
		if (tmp - ((int) value + (int) extra)<0x00)
		{
			tmp += 256;
			data[i] = (unsigned char) (tmp - ((int) value + (int) extra));
			extra = 1;
		}
		else
		{
			data[i] = data[i] - value;
			data[i] = data[i] - extra;
			extra = 0;
		}
	}
	return *this;
}

uint128 uint128::operator-=(const uint64_t b)
{
	int i, tmp;
	uint128 ui = *this;
	unsigned char value, extra = 0;
	unsigned char * a = (unsigned char*) &b;
	if (ui>b)
	{
		for (i = 15; i >= 0; i--)
		{
			value = i>7 ? a[15 - i] : 0;
			tmp = ui.data[i];
			if (tmp - ((int) value + (int) extra)<0x00)
			{
				tmp += 256;
				ui.data[i] = (unsigned char) (tmp - ((int) value + (int) extra));
				extra = 1;
			}
			else
			{
				ui.data[i] = ui.data[i] - value;
				ui.data[i] = ui.data[i] - extra;
				extra = 0;
			}
		}
		*this = ui;
		return *this;
	}
	*this = (uint8_t) 0;
	return *this;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator*=(const uint128& b)
{
	uint128 a, c;
	int i, j, q;
	for (q = 15; q >= 0; q--)
	{
		j = 0;
		for (i = 1; i <= b.data[q]; i = 2 * i)
		{
			c = *this;
			if ((i&b.data[q]) != 0)
				a = a + (c << (j + 8 * (15 - q)));
			j++;
		}
	}
	*this = a;
	return *this;
}

uint128 uint128::operator*=(const uint64_t b)
{
	if (b == 0)
	{
		*this = 0;
		return *this;
	}
	uint128 a, c;
	uint64_t i, j = 0;
	for (i = 1; i <= b; i = 2 * i)
	{
		c = *this;
		if ((i&b) != 0)
			a = a + (c << j);
		j++;
	}
	*this = a;
	return *this;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

bool uint128::operator>(const uint128& b)
{
	uint64_t i;
	for (i = 0; i<16; i++)
		if (data[i]>b.data[i])
			return true;
		else if (b.data[i]>data[i])
			return false;
	return false;
}

bool uint128::operator>(const uint64_t b)
{
	int i;
	unsigned char * c = (unsigned char*) &b;
	for (i = 0; i <= 7; i++)
		if (data[i] != 0)
			return true;
	for (i = 8; i<16; i++)
		if (data[i]>c[7 - (i - 12)])
			return true;
		else if (data[i]<c[7 - (i - 12)])
			return false;
	return false;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

bool uint128::operator>=(const uint128& b)
{
	int i;
	for (i = 0; i<16; i++)
		if (data[i] >= b.data[i] && data[i] != 0)
			return true;
		else if (b.data[i]>data[i])
			return false;
	return false;
}
bool uint128::operator>=(const uint64_t b)
{
	int i;
	unsigned char * c = (unsigned char*) &b;
	for (i = 0; i <= 11; i++)
		if (data[i] != 0)
			return true;
	for (i = 12; i<16; i++)
		if (data[i] >= c[3 - (i - 12)] && data[i] != 0)
			return true;
		else if (data[i]<c[3 - (i - 12)])
			return false;
	return false;
}
bool uint128::operator<=(const uint128& b)
{
	int i;
	for (i = 0; i<16; i++)
		if (data[i] >= b.data[i] && data[i] != 0)
			return false;
		else if (b.data[i]>data[i])
			return true;
	return true;
}
bool uint128::operator<=(const uint64_t b)
{
	int i;
	unsigned char * c = (unsigned char*) &b;
	for (i = 0; i <= 11; i++)
		if (data[i] != 0)
			return false;
	for (i = 12; i<16; i++)
		if (data[i] >= c[3 - (i - 12)] && data[i] != 0)
			return false;
		else if (data[i]<c[3 - (i - 12)])
			return true;
	return true;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

bool uint128::operator<(const uint128& b)
{
	int i;
	for (i = 0; i<16; i++)
		if (data[i]<b.data[i])
			return true;
		else if (b.data[i]<data[i])
			return false;
	return false;
}
bool uint128::operator<(const uint64_t b)
{
	int i;
	unsigned char * c = (unsigned char*) &b;
	for (i = 0; i <= 7; i++)
		if (data[i] != 0)
			return false;
	for (i = 8; i<16; i++)
		if (data[i]<c[7 - (i - 8)])
			return true;
	return false;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

bool uint128::operator==(const uint128& b)
{
	int i;
	for (i = 0; i<16; i++)
		if (data[i] != b.data[i])
			return false;
	return false;
}

bool uint128::operator==(const uint64_t b)
{
	int i;
	unsigned char * c = (unsigned char*) &b;
	for (i = 0; i <= 7; i++)
		if (data[i] != 0)
			return false;
	for (i = 8; i<16; i++)
		if (data[i] != c[7 - (i - 8)])
			return false;
	return true;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

bool uint128::operator!=(const uint128& b)
{
	int i;
	for (i = 0; i<16; i++)
		if (data[i] != b.data[i])
			return true;
	return false;
}
bool uint128::operator!=(const uint64_t b)
{
	int i;
	unsigned char * c = (unsigned char*) &b;
	for (i = 0; i <= 7; i++)
		if (data[i] != 0)
			return true;
	for (i = 8; i<16; i++)
		if (data[i] != c[7 - (i - 8)])
			return true;
	return false;
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator/(uint128 b)
{
	if(b==1)return *this;
	if(*this<b)return 0;
	uint128 a, c;
	c = *this;
	do
	{
		a++;
	}while ((c = c - b) >= b);
	return a;
}
uint128 uint128::operator/(const uint64_t b)
{
	return (*this)/((uint128)b);
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator%(const uint128& b)
{
	return *this - (((*this) / b)*b);
}

uint128 uint128::operator%(const uint64_t b)
{
	return *this - (((*this) / b)*b);
}
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

uint128 uint128::operator++(int)
{
	int i;
	uint128 i128 = *this;
	for (i = 15; i >= 0; i--)
	{
		if (data[i] + 1 <= 0xFF)
		{
			data[i] = data[i] + 1;
			break;
		}
		else
		{
			data[i] = 0;
		}
	}
	return i128;
}

uint128 uint128::operator++()
{
	int i;
	for (i = 15; i >= 0; i--)
	{
		if (data[i] + 1 <= 0xFF)
		{
			data[i] = data[i] + 1;
			break;
		}
		else
		{
			data[i] = 0;
		}
	}
	return *this;
}

uint128 uint128::operator--(int)
{
	int i, j;
	uint128 i128 = *this;
	for (i = 15; i >= 0; i--)
	{
		if (data[i] - 1 >= 0x00)
		{
			data[i] = data[i] - 1;
			for (j = i + 1; j<16; j++)
				data[j] = 0xFF;
			break;
		}
	}
	return i128;
}

uint128 uint128::operator--()
{
	int i, j;

	for (i = 15; i >= 0; i--)
	{
		if (data[i] - 1 >= 0x00)
		{
			data[i] = data[i] - 1;
			for (j = i + 1; j<8; j++)
				data[j] = 0xFF;
			break;
		}
	}
	return *this;
}
